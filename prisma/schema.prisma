generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider     = "sqlite"
//   url          = "file:./.sqlite"
//   relationMode = "prisma"
// }

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model uiDraft {
  id    String  @id @default(cuid())
  vId   String?
  draft String?
}

model ComponentChild {
  id          String    @id @default(cuid())
  component   Component @relation(fields: [componentId], references: [id])
  componentId String

  @@index([componentId])
}

model ComponentDataItem {
  id              String     @id @default(cuid())
  componentDataId String?
  key             String?
  value           String?
  component       Component? @relation(fields: [componentId], references: [id])
  componentId     String?

  @@index([componentId])
}

model ComponentData {
  id          String     @id @default(cuid())
  component   Component? @relation(fields: [componentId], references: [id])
  componentId String?
  key         String?
  value       String?

  @@index([componentId])
}

model Component {
  id         String              @id @default(cuid())
  type       String?             @default("section")
  Page       Page?               @relation(fields: [pageId], references: [id])
  pageId     String?
  name       String?
  icon       String?
  variant    String              @default("default")
  data       ComponentData[]
  items      ComponentDataItem[]
  children   ComponentChild[]
  classNames String?

  @@index([pageId])
}

model Page {
  id               String         @id @default(cuid())
  version          SpaceUIVersion @relation(fields: [spaceUIVersionId], references: [id])
  spaceUIVersionId String
  name             String
  icon             String?
  path             String?
  components       Component[]
  html             String?
  pathRegexp       String?
  uiDef            String?
  roles            UserRoles?     @relation(fields: [userRolesId], references: [id])
  userRolesId      String?

  @@index([spaceUIVersionId])
  @@index([userRolesId])
}

model ConfigVars {
  id               String          @id @default(cuid())
  key              String
  value            String
  uiVersion        SpaceUIVersion? @relation(fields: [spaceUIVersionId], references: [id])
  spaceUIVersionId String?
  space            Space?          @relation(fields: [spaceId], references: [id])
  spaceId          String?
  createdBy        SpaceUser       @relation(fields: [userId], references: [id])
  userId           String

  @@index([spaceUIVersionId])
  @@index([spaceId])
  @@index([userId])
}

model SpaceUIVersion {
  id          String       @id @default(cuid())
  version     Int
  space       SpaceUI?     @relation(fields: [spaceUIId], references: [id])
  spaceUIId   String?
  dateCreated DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  deleted     Boolean      @default(false)
  status      String?      @default("draft")
  pages       Page[]
  default     Boolean      @default(false)
  configVars  ConfigVars[]
  createdBy   SpaceUser?   @relation(fields: [userId], references: [id])
  userId      String?

  @@index([spaceUIId])
  @@index([userId])
}

model SpaceUI {
  id             String           @id @default(cuid())
  space          Space?           @relation(fields: [spaceId], references: [id])
  spaceId        String?
  name           String           @default("dawn")
  spaceUIVersion SpaceUIVersion[]
  template       Boolean          @default(false)
  user           SpaceUser?       @relation(fields: [userId], references: [id])
  userId         String?

  @@index([spaceId])
  @@index([userId])
}

model TableData {
  id       String  @id @default(cuid())
  row      Row?    @relation(fields: [rowId], references: [id])
  rowId    String?
  column   String
  data     String
  type     String  @default("string")
  rel      String?
  multiple Boolean @default(false)
  required Boolean @default(false)

  @@index([rowId])
}

model Row {
  id           String      @id @default(cuid())
  table        SpaceTable  @relation(fields: [spaceTableId], references: [id])
  spaceTableId String
  tableData    TableData[]
  dateCreated  DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt

  @@index([spaceTableId])
}

model ColumnSelectOptions {
  id       String @id @default(cuid())
  column   Column @relation(fields: [columnId], references: [id])
  columnId String
  label    String
  value    String

  @@index([columnId])
}

model Column {
  id              String                @id @default(cuid())
  table           SpaceTable?           @relation(fields: [spaceTableId], references: [id])
  spaceTableId    String?
  name            String?
  type            String?               @default("string")
  regex           String?
  rel             String?
  multiple        Boolean               @default(false)
  required        Boolean               @default(false)
  options         ColumnSelectOptions[]
  dateTimeDefault String?               @default("custom")
  defaultOn       Boolean               @default(false)
  reportField     ReportField[]
  reportFilters   ReportFilter[]

  @@index([spaceTableId])
}

model MsgFeedback {
  id           String  @id @default(cuid())
  name         String
  email        String
  message      String
  screenshot   String
  space        Space?  @relation(fields: [spaceId], references: [id])
  spaceId      String?
  customerCopy Boolean @default(false)

  @@index([spaceId])
}

model BlogContent {
  id         String    @id() @default(cuid())
  title      String?
  coverImage String?
  content    String
  author     User?     @relation(fields: [userId], references: [id])
  userId     String?
  published  Boolean   @default(false)
  flagged    Boolean   @default(false)
  slug       String    @unique
  comments   Comment[]
  category   String    @default("Tech")

  @@index([userId])
}

model Comment {
  id            String      @id() @default(cuid())
  blog          BlogContent @relation(fields: [blogContentId], references: [id])
  content       String
  blogContentId String
  authorName    String
  authorEmail   String
  flagged       Boolean?    @default(false)
  user          User        @relation(fields: [userId], references: [id])
  userId        String

  @@index([blogContentId])
  @@index([userId])
}

model Relations {
  id           String     @id @default(cuid())
  type         String     @default("one-to-may")
  left         SpaceTable @relation(fields: [spaceTableId], references: [id])
  spaceTableId String
  right        String?

  @@index([spaceTableId])
}

model TableFilter {
  id String @id @default(cuid())
}

model Chart {
  id          String         @id @default(cuid())
  name        String
  table       SpaceTable?    @relation(fields: [tableId], references: [id])
  tableId     String?
  type        String?
  description String?
  fields      ReportField[]
  labelKey    String?
  valueKey    String?
  filters     ReportFilter[]
  SQT         SQT[]

  @@index([tableId])
}

model DashboardForm {
  id          String        @id @default(cuid())
  name        String
  table       SpaceTable?   @relation(fields: [tableId], references: [id])
  tableId     String?
  type        String?
  description String?
  fields      ReportField[]
  SQT         SQT[]
  isUpdate    Boolean       @default(false)

  @@index([tableId])
}

model SQT {
  id              String         @id @default(cuid())
  form            DashboardForm? @relation(fields: [dashboardFormId], references: [id])
  dashboardFormId String?
  report          Report?        @relation(fields: [reportId], references: [id])
  reportId        String?
  chart           Chart?         @relation(fields: [chartId], references: [id])
  chartId         String?
  recipientType   String?
  recipients      String         @default("[]")
  coverImage      String?
  title           String?
  description     String?
  via             String?        @default("external")
  emailList       String?
  collection      SpaceTable?    @relation(fields: [spaceTableId], references: [id])
  spaceTableId    String?
  tableEmailCol   String?
  shareWith       String?

  @@index([dashboardFormId])
  @@index([reportId])
  @@index([chartId])
  @@index([spaceTableId])
}

model ReportField {
  id              String         @id @default(cuid())
  field           Column         @relation(fields: [columnId], references: [id])
  columnId        String
  report          Report?        @relation(fields: [reportId], references: [id])
  reportId        String?
  chart           Chart?         @relation(fields: [chartId], references: [id])
  chartId         String?
  dashboardForm   DashboardForm? @relation(fields: [dashboardFormId], references: [id])
  dashboardFormId String?
  isUpdate        Boolean        @default(false)

  @@index([dashboardFormId])
  @@index([columnId])
  @@index([reportId])
  @@index([chartId])
}

model Report {
  id              String                  @id @default(cuid())
  name            String
  table           SpaceTable?             @relation(fields: [tableId], references: [id])
  tableId         String?
  fields          ReportField[]
  description     String?
  sort            String?
  sortBy          String?                 @default("none")
  layout          String?                 @default("tabular")
  orientation     String?                 @default("landscape")
  filters         ReportFilter[]
  SQT             SQT[]
  charts          String?                 @default("[]")
  viewPermissions ReportViewPermissions[]

  @@index([tableId])
}

model ReportFilter {
  id              String  @id @default(cuid())
  column          Column? @relation(fields: [columnId], references: [id])
  columnId        String?
  compare         String?
  operand         String?
  compareColumnId String?
  compareValue    String?
  report          Report? @relation(fields: [reportId], references: [id])
  reportId        String?
  chart           Chart?  @relation(fields: [chartId], references: [id])
  chartId         String?
  enabled         Boolean @default(true)

  @@index([reportId])
  @@index([chartId])
  @@index([columnId])
}

model SpaceTable {
  id                   String                           @id @default(cuid())
  name                 String
  columns              Column[]
  rows                 Row[]
  relations            Relations[]
  createdBy            SpaceUser?                       @relation(fields: [userId], references: [id])
  userId               String?
  app                  Space?                           @relation(fields: [appId], references: [id])
  appId                String?
  displayName          String?
  reports              Report[]
  charts               Chart[]
  requiredPermissions  String?                          @default("[]")
  dashboardForms       DashboardForm[]
  disableApi           Boolean                          @default(false)
  dataRules            DataRules[]
  SQT                  SQT[]
  createPermissions    CreateCollectionPermissions[]
  updatePermissions    UpdateCollectionPermissions[]
  deletePermissions    DeleteCollectionPermissions[]
  aPIDeletePermissions APIDeleteCollectionPermissions[]
  aPIUpdatePermissions APIUpdateCollectionPermissions[]
  aPICreatePermissions APICreateCollectionPermissions[]
  viewPermissions      CollectionViewPermissions[]
  aPIGETPermissions    APIGETCollectionPermissions[]

  @@index([userId])
  @@index([appId])
}

model DataRules {
  id           String     @id @default(cuid())
  table        SpaceTable @relation(fields: [spaceTableId], references: [id])
  spaceTableId String

  @@index([spaceTableId])
}

model Role {
  id   String       @id @default(cuid())
  name String
  role Permission[]
}

//  @db.Text

model SpaceSession {
  id           String     @id @default(cuid())
  sessionToken String     @db.VarChar(3000)
  expires      DateTime?
  user         SpaceUser? @relation(fields: [userId], references: [id])
  userId       String?
  dateCreated  DateTime   @default(now())
  space        Space      @relation(fields: [spaceId], references: [id])
  spaceId      String

  @@index([spaceId])
  @@index([userId])
}

model Geo {
  id    String      @id @default(cuid())
  lat   Float
  lng   Float
  admin SpaceUser[]
}

model SpaceUser {
  id                     String           @id @default(cuid())
  space                  Space            @relation(fields: [spaceId], references: [id])
  spaceId                String
  apiKeys                SpaceAPIKeys?    @relation(fields: [spaceAPIKeysId], references: [id])
  spaceAPIKeysId         String?
  dateCreated            DateTime         @default(now())
  updatedAt              DateTime?        @default(now()) @updatedAt
  password               String?
  username               String?
  sessions               SpaceSession[]
  status                 String           @default("pending-confirmation")
  defaultPasswordUpdated Boolean          @default(false)
  name                   String?
  avatar                 String?
  geo                    Geo?             @relation(fields: [geoId], references: [id])
  geoId                  String?
  AdminKeys              AdminKeys[]
  user                   User?            @relation(fields: [userId], references: [id])
  userId                 String?
  ConfigVars             ConfigVars[]
  SpaceUIVersion         SpaceUIVersion[]
  SpaceUI                SpaceUI[]
  SpaceTable             SpaceTable[]
  SpaceUpdate            SpaceUpdate[]
  role                   Permission?      @relation(fields: [roleId], references: [id])
  roleId                 String?
  UserRoles              UserRoles?       @relation(fields: [userRolesId], references: [id])
  userRolesId            String?
  signup                 SignUp?          @relation(fields: [signUpId], references: [id])
  signUpId               String?

  @@index([roleId])
  @@index([spaceAPIKeysId])
  @@index([userId])
  @@index([geoId])
  @@index([spaceId])
  @@index([signUpId])
  @@index([userRolesId])
  @@map("Admin")
}

model SignUp {
  id    String      @id @default(cuid())
  date  String?
  month String?
  year  String
  users SpaceUser[]
}

model SpaceUpdate {
  id      String    @id @default(cuid())
  user    SpaceUser @relation(fields: [userId], references: [id])
  userId  String
  time    DateTime  @default(now())
  fields  String?
  space   Space?    @relation(fields: [spaceId], references: [id])
  spaceId String?

  @@index([userId])
  @@index([spaceId])
}

model Log {
  id        String   @id @default(cuid())
  url       String?
  session   String?
  tablId    String?
  severity  String   @default("info") // error // warning
  client    Boolean  @default(false)
  trigger   String?
  timestamp DateTime @default(now())
  space     Space?   @relation(fields: [spaceId], references: [id])
  spaceId   String?
  resolved  Boolean  @default(false)

  @@index([spaceId])
}

model AdminKeys {
  id             String       @id @default(cuid())
  admin          SpaceUser    @relation(fields: [adminId], references: [id])
  adminId        String
  apiKey         SpaceAPIKeys @relation(fields: [spaceAPIKeysId], references: [id])
  spaceAPIKeysId String

  @@index([spaceAPIKeysId])
  @@index([adminId])
}

model SpaceAPIKeys {
  id          String      @id @default(cuid())
  key         String
  dateCreated DateTime    @default(now())
  space       Space?      @relation(fields: [spaceId], references: [id])
  spaceId     String?
  users       SpaceUser[]
  userId      String?
  expires     DateTime?
  name        String?
  hits        Int         @default(0)
  adminKeys   AdminKeys[]

  @@index([spaceId])
}

model Permission {
  id          String      @id @default(cuid())
  name        String
  space       Space?      @relation(fields: [spaceId], references: [id])
  spaceId     String?
  description String?
  created     DateTime    @default(now())
  updated     DateTime    @default(now()) @updatedAt
  Role        Role?       @relation(fields: [roleId], references: [id])
  roleId      String?
  users       SpaceUser[]

  @@index([spaceId])
  @@index([roleId])
}

model UserRoles {
  id                         String                           @id @default(cuid())
  name                       String?
  description                String?
  created                    DateTime                         @default(now())
  updated                    DateTime                         @default(now()) @updatedAt
  users                      SpaceUser[]
  createCollections          CreateCollectionPermissions[]
  updateCollections          UpdateCollectionPermissions[]
  deleteCollections          DeleteCollectionPermissions[]
  viewCollections            CollectionViewPermissions[]
  aPIDeletePermissions       APIDeleteCollectionPermissions[]
  aPIUpdatePermissions       APIUpdateCollectionPermissions[]
  aPICreatePermissions       APICreateCollectionPermissions[]
  aPIGETPermissions          APIGETCollectionPermissions[]
  isSuperUser                Boolean                          @default(false)
  generateApiKey             Boolean                          @default(false)
  createAdminAccount         Boolean                          @default(false)
  updateAuthTokenOptions     Boolean                          @default(false)
  updateRolesOptions         Boolean                          @default(false)
  updateAuthProviders        Boolean                          @default(false)
  accessSettings             Boolean                          @default(false)
  updateMailSettings         Boolean                          @default(false)
  updateSMSSettings          Boolean                          @default(false)
  updatePaymentProviders     Boolean                          @default(false)
  updateMediaStorageSettings Boolean                          @default(false)
  updateLogisticsProvider    Boolean                          @default(false)
  updateUiVersion            Boolean                          @default(false)
  accessEditor               Boolean                          @default(false)
  accessDashboards           Boolean                          @default(false)
  switchUI                   Boolean                          @default(false)
  pages                      Page[]
  Space                      Space?                           @relation(fields: [spaceId], references: [id])
  spaceId                    String?

  @@index([spaceId])
}

model ReportViewPermissions {
  id       String  @id @default(cuid())
  report   Report? @relation(fields: [reportId], references: [id])
  reportId String?

  @@index([reportId])
}

model CollectionViewPermissions {
  id           String      @id @default(cuid())
  userRoles    UserRoles?  @relation(fields: [userRolesId], references: [id])
  userRolesId  String?
  collection   SpaceTable? @relation(fields: [spaceTableId], references: [id])
  spaceTableId String?

  @@index([userRolesId])
  @@index([spaceTableId])
}

model APIGETCollectionPermissions {
  id           String      @id @default(cuid())
  userRoles    UserRoles?  @relation(fields: [userRolesId], references: [id])
  userRolesId  String?
  collection   SpaceTable? @relation(fields: [spaceTableId], references: [id])
  spaceTableId String?

  @@index([userRolesId])
  @@index([spaceTableId])
}

model APIDeleteCollectionPermissions {
  id           String      @id @default(cuid())
  userRoles    UserRoles?  @relation(fields: [userRolesId], references: [id])
  userRolesId  String?
  collection   SpaceTable? @relation(fields: [spaceTableId], references: [id])
  spaceTableId String?

  @@index([userRolesId])
  @@index([spaceTableId])
}

model APIUpdateCollectionPermissions {
  id           String      @id @default(cuid())
  userRoles    UserRoles?  @relation(fields: [userRolesId], references: [id])
  userRolesId  String?
  collection   SpaceTable? @relation(fields: [spaceTableId], references: [id])
  spaceTableId String?

  @@index([spaceTableId])
  @@index([userRolesId])
}

model APICreateCollectionPermissions {
  id           String      @id @default(cuid())
  userRoles    UserRoles?  @relation(fields: [userRolesId], references: [id])
  userRolesId  String?
  collection   SpaceTable? @relation(fields: [spaceTableId], references: [id])
  spaceTableId String?

  @@index([userRolesId])
  @@index([spaceTableId])
}

model DeleteCollectionPermissions {
  id           String      @id @default(cuid())
  userRoles    UserRoles?  @relation(fields: [userRolesId], references: [id])
  userRolesId  String?
  collection   SpaceTable? @relation(fields: [spaceTableId], references: [id])
  spaceTableId String?

  @@index([userRolesId])
  @@index([spaceTableId])
}

model UpdateCollectionPermissions {
  id           String      @id @default(cuid())
  userRoles    UserRoles?  @relation(fields: [userRolesId], references: [id])
  userRolesId  String?
  collection   SpaceTable? @relation(fields: [spaceTableId], references: [id])
  spaceTableId String?

  @@index([spaceTableId])
  @@index([userRolesId])
}

model CreateCollectionPermissions {
  id           String      @id @default(cuid())
  userRoles    UserRoles?  @relation(fields: [userRolesId], references: [id])
  userRolesId  String?
  collection   SpaceTable? @relation(fields: [spaceTableId], references: [id])
  spaceTableId String?

  @@index([userRolesId])
  @@index([spaceTableId])
}

model Dashboard {
  id          String  @id @default(cuid())
  space       Space   @relation(fields: [spaceId], references: [id])
  name        String
  spaceId     String
  description String?

  @@index([spaceId])
}

model Subscription {
  id    String @id() @default(cuid())
  email String @unique
}

model ApiSetup {
  id           String  @id() @default(cuid())
  complete     Boolean @default(false)
  step         Int     @default(0)
  space        Space?  @relation(fields: [spaceId], references: [id])
  spaceId      String?
  stepOne      String?
  stepTwo      String?
  stepThree    String?
  stepFour     String? @default("blank")
  apiUrl       String?
  qsWidgetOpen Boolean @default(true)

  @@index([spaceId])
}

model Onboarding {
  id           String  @id() @default(cuid())
  complete     Boolean @default(false)
  step         Int     @default(0)
  space        Space?  @relation(fields: [spaceId], references: [id])
  spaceId      String?
  stepRole     String?
  stepClient   String?
  stepCoding   String?
  stepTemplate String? @default("blank")

  @@index([spaceId])
}

model Space {
  id                       String         @id @default(cuid())
  appId                    String         @unique
  name                     String?
  icon                     String?
  owner                    User?          @relation(fields: [userId], references: [id])
  userId                   String?
  active                   Boolean        @default(false)
  updates                  SpaceUpdate[]
  tables                   SpaceTable[]
  spaceUis                 SpaceUI[]
  apiKeys                  SpaceAPIKeys[]
  users                    SpaceUser[]
  configVars               ConfigVars[]
  secret                   String
  miniAppChannel           Boolean        @default(false)
  apiChannel               Boolean        @default(false)
  subdomainChannel         Boolean        @default(false)
  customDomainChannel      Boolean        @default(false)
  standaloneMobileChannel  Boolean        @default(false)
  standaloneDesktopChannel Boolean        @default(false)
  uploadProvider           String?        @default("cloudinary")
  template                 Boolean        @default(false)
  permissions              Permission[]
  defaultUIId              String?
  deactivated              Boolean?       @default(false)
  dashboards               Dashboard[]
  spaceSessions            SpaceSession[]
  superAdminSecret         String?
  logs                     Log[]
  uiVid                    String?
  feedbacks                MsgFeedback[]
  onboarding               Onboarding[]
  roles                    UserRoles[]
  apiSetup                 ApiSetup[]

  @@index([userId])
}

model Example {
  id       String  @id @default(cuid())
  property String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  spaces        Space[]
  BlogContent   BlogContent[]
  comments      Comment[]
  SpaceUser     SpaceUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
