generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./.sqlite"
// }

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model uiDraft {
  id    String  @id @default(cuid())
  vId   String?
  draft String?
}

model ComponentChild {
  id          String    @id @default(cuid())
  component   Component @relation(fields: [componentId], references: [id])
  componentId String

  @@index([componentId])
}

model ComponentDataItem {
  id              String     @id @default(cuid())
  componentDataId String?
  key             String?
  value           String?
  component       Component? @relation(fields: [componentId], references: [id])
  componentId     String?

  @@index([componentId])
}

model ComponentData {
  id          String     @id @default(cuid())
  component   Component? @relation(fields: [componentId], references: [id])
  componentId String?
  key         String?
  value       String?

  @@index([componentId])
}

model Component {
  id         String              @id @default(cuid())
  type       String?             @default("section")
  Page       Page?               @relation(fields: [pageId], references: [id])
  pageId     String?
  name       String?
  icon       String?
  variant    String              @default("default")
  data       ComponentData[]
  items      ComponentDataItem[]
  children   ComponentChild[]
  classNames String?

  @@index([pageId])
}

model Page {
  id               String         @id @default(cuid())
  version          SpaceUIVersion @relation(fields: [spaceUIVersionId], references: [id])
  spaceUIVersionId String
  name             String
  icon             String?
  path             String?
  components       Component[]
  html             String?
  pathRegexp       String?
  uiDef            String?

  @@index([spaceUIVersionId])
}

model ConfigVars {
  id               String          @id @default(cuid())
  key              String
  value            String
  uiVersion        SpaceUIVersion? @relation(fields: [spaceUIVersionId], references: [id])
  spaceUIVersionId String?
  space            Space?          @relation(fields: [spaceId], references: [id])
  spaceId          String?
  createdBy        User            @relation(fields: [userId], references: [id])
  userId           String

  @@index([spaceUIVersionId])
  @@index([spaceId])
  @@index([userId])
}

model SpaceUIVersion {
  id          String       @id @default(cuid())
  version     Int
  space       SpaceUI?     @relation(fields: [spaceUIId], references: [id])
  spaceUIId   String?
  dateCreated DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  deleted     Boolean      @default(false)
  status      String?      @default("draft")
  pages       Page[]
  default     Boolean      @default(false)
  configVars  ConfigVars[]
  createdBy   User?        @relation(fields: [userId], references: [id])
  userId      String?

  @@index([spaceUIId])
  @@index([userId])
}

model SpaceUI {
  id             String           @id @default(cuid())
  space          Space?           @relation(fields: [spaceId], references: [id])
  spaceId        String?
  name           String           @default("dawn")
  spaceUIVersion SpaceUIVersion[]
  template       Boolean          @default(false)
  user           User?            @relation(fields: [userId], references: [id])
  userId         String?

  @@index([spaceId])
  @@index([userId])
}

model TableData {
  id       String  @id @default(cuid())
  row      Row?    @relation(fields: [rowId], references: [id])
  rowId    String?
  column   String
  data     String
  type     String  @default("string")
  rel      String?
  multiple Boolean @default(false)
  required Boolean @default(false)

  @@index([rowId])
}

model Row {
  id           String      @id @default(cuid())
  table        SpaceTable  @relation(fields: [spaceTableId], references: [id])
  spaceTableId String
  tableData    TableData[]
  dateCreated  DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt

  @@index([spaceTableId])
}

model ColumnSelectOptions {
  id       String @id @default(cuid())
  column   Column @relation(fields: [columnId], references: [id])
  columnId String
  label    String
  value    String

  @@index([columnId])
}

model Column {
  id              String                @id @default(cuid())
  table           SpaceTable?           @relation(fields: [spaceTableId], references: [id])
  spaceTableId    String?
  name            String?
  type            String?               @default("string")
  regex           String?
  rel             String?
  multiple        Boolean               @default(false)
  required        Boolean               @default(false)
  options         ColumnSelectOptions[]
  dateTimeDefault String?               @default("custom")
  defaultOn       Boolean               @default(false)
  reportField     ReportField[]
  reportFilters   ReportFilter[]

  @@index([spaceTableId])
}

model MsgFeedback {
  id           String  @id @default(cuid())
  name         String
  email        String
  message      String
  screenshot   String
  space        Space?  @relation(fields: [spaceId], references: [id])
  spaceId      String?
  customerCopy Boolean @default(false)
}

model BlogContent {
  id         String    @id() @default(cuid())
  title      String?
  coverImage String?
  content    String
  author     User?     @relation(fields: [userId], references: [id])
  userId     String?
  published  Boolean   @default(false)
  flagged    Boolean   @default(false)
  slug       String    @unique
  comments   Comment[]
}

model Comment {
  id            String      @id() @default(cuid())
  blog          BlogContent @relation(fields: [blogContentId], references: [id])
  content       String
  blogContentId String
  authorName    String
  authorEmail   String
  flagged       Boolean?    @default(false)
  user          User        @relation(fields: [userId], references: [id])
  userId        String
}

model Relations {
  id           String     @id @default(cuid())
  type         String     @default("one-to-may")
  left         SpaceTable @relation(fields: [spaceTableId], references: [id])
  spaceTableId String
  right        String?
}

model TableFilter {
  id String @id @default(cuid())
}

model Chart {
  id          String         @id @default(cuid())
  name        String
  table       SpaceTable?    @relation(fields: [tableId], references: [id])
  tableId     String?
  type        String?
  description String?
  fields      ReportField[]
  labelKey    String?
  valueKey    String?
  filters     ReportFilter[]
  SQT         SQT[]
}

model DashboardForm {
  id          String        @id @default(cuid())
  name        String
  table       SpaceTable?   @relation(fields: [tableId], references: [id])
  tableId     String?
  type        String?
  description String?
  fields      ReportField[]
  SQT         SQT[]
}

model SQT {
  id              String         @id @default(cuid())
  form            DashboardForm? @relation(fields: [dashboardFormId], references: [id])
  dashboardFormId String?
  report          Report?        @relation(fields: [reportId], references: [id])
  reportId        String?
  chart           Chart?         @relation(fields: [chartId], references: [id])
  chartId         String?
  recipientType   String?
  recipients      String         @default("[]")
  coverImage      String?
  title           String?
  description     String?
  via             String?        @default("external")
  emailList       String?
  collection      SpaceTable?    @relation(fields: [spaceTableId], references: [id])
  spaceTableId    String?
  tableEmailCol   String?
  shareWith       String?
}

model ReportField {
  id              String         @id @default(cuid())
  field           Column         @relation(fields: [columnId], references: [id])
  columnId        String
  report          Report?        @relation(fields: [reportId], references: [id])
  reportId        String?
  chart           Chart?         @relation(fields: [chartId], references: [id])
  chartId         String?
  dashboardForm   DashboardForm? @relation(fields: [dashboardFormId], references: [id])
  dashboardFormId String?
}

model Report {
  id          String         @id @default(cuid())
  name        String
  table       SpaceTable?    @relation(fields: [tableId], references: [id])
  tableId     String?
  fields      ReportField[]
  description String?
  sort        String?
  sortBy      String?        @default("none")
  layout      String?        @default("tabular")
  orientation String?        @default("landscape")
  filters     ReportFilter[]
  SQT         SQT[]
  charts      String?        @default("[]")
}

model ReportFilter {
  id              String  @id @default(cuid())
  column          Column? @relation(fields: [columnId], references: [id])
  columnId        String?
  compare         String?
  operand         String?
  compareColumnId String?
  compareValue    String?
  report          Report? @relation(fields: [reportId], references: [id])
  reportId        String?
  chart           Chart?  @relation(fields: [chartId], references: [id])
  chartId         String?
  enabled         Boolean @default(true)
}

model SpaceTable {
  id                  String          @id @default(cuid())
  name                String
  columns             Column[]
  rows                Row[]
  relations           Relations[]
  createdBy           User?           @relation(fields: [userId], references: [id])
  userId              String
  space               Space?          @relation(fields: [tableSpace], references: [id])
  tableSpace          String?
  displayName         String?
  reports             Report[]
  charts              Chart[]
  requiredPermissions String?         @default("[]")
  dashboardForms      DashboardForm[]
  disableApi          Boolean         @default(false)
  dataRules           DataRules[]
  SQT                 SQT[]
}

model DataRules {
  id           String     @id @default(cuid())
  table        SpaceTable @relation(fields: [spaceTableId], references: [id])
  spaceTableId String
}

model Role {
  id   String       @id @default(cuid())
  name String
  role Permission[]
}

model SpaceSession {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  expires      DateTime?
  admin        Admin?    @relation(fields: [adminId], references: [id])
  adminId      String?
  dateCreated  DateTime  @default(now())
  space        Space     @relation(fields: [spaceId], references: [id])
  spaceId      String
}

model Geo {
  id    String  @id @default(cuid())
  lat   Float
  lng   Float
  admin Admin[]
}

model Admin {
  id                     String         @id @default(cuid())
  user                   User?          @relation(fields: [userId], references: [id])
  userId                 String?
  space                  Space          @relation(fields: [spaceId], references: [id])
  spaceId                String
  apiKeys                SpaceAPIKeys?  @relation(fields: [spaceAPIKeysId], references: [id])
  spaceAPIKeysId         String?
  rules                  APIRule[]
  dateCreated            DateTime       @default(now())
  updatedAt              DateTime?      @default(now()) @updatedAt
  password               String?
  role                   String?        @default("user")
  username               String?
  sessions               SpaceSession[]
  status                 String         @default("pending-confirmation")
  defaultPasswordUpdated Boolean        @default(false)
  name                   String?
  avatar                 String?
  geo                    Geo?           @relation(fields: [geoId], references: [id])
  geoId                  String?
}

model SpaceUpdate {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  time    DateTime @default(now())
  fields  String?
  space   Space?   @relation(fields: [spaceId], references: [id])
  spaceId String?
}

model Log {
  id        String   @id @default(cuid())
  url       String?
  session   String?
  tablId    String?
  severity  String   @default("info") // error // warning
  client    Boolean  @default(false)
  trigger   String?
  timestamp DateTime @default(now())
  space     Space?   @relation(fields: [spaceId], references: [id])
  spaceId   String?
  resolved  Boolean  @default(false)
}

model SpaceAPIKeys {
  id          String    @id @default(cuid())
  key         String
  dateCreated DateTime  @default(now())
  space       Space?    @relation(fields: [spaceId], references: [id])
  spaceId     String?
  admins      Admin[]
  createdBy   User?     @relation(fields: [userId], references: [id])
  userId      String?
  expires     DateTime?
  name        String?
  hits        Int       @default(0)
}

model Permission {
  id          String   @id @default(cuid())
  name        String
  apiRule     APIRule? @relation(fields: [aPIRuleId], references: [id])
  aPIRuleId   String?
  space       Space?   @relation(fields: [spaceId], references: [id])
  spaceId     String?
  description String?
  created     DateTime @default(now())
  updated     DateTime @default(now()) @updatedAt
  Role        Role?    @relation(fields: [roleId], references: [id])
  roleId      String?
}

model APIRule {
  id          String       @id @default(cuid())
  name        String?
  permissions Permission[]
  admin       Admin?       @relation(fields: [adminId], references: [id])
  adminId     String?
  space       Space?       @relation(fields: [spaceId], references: [id])
  spaceId     String?
  description String?
  created     DateTime     @default(now())
  updated     DateTime     @default(now()) @updatedAt
}

model SpaceUser {
  id       String   @id @default(cuid())
  created  DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  space    Space    @relation(fields: [spaceId], references: [id])
  spaceId  String
  username String?
  password String?
  email    String?
}

model Dashboard {
  id          String  @id @default(cuid())
  space       Space   @relation(fields: [spaceId], references: [id])
  name        String
  spaceId     String
  description String?
}

model Subscription {
  id    String @id() @default(cuid())
  email String @unique
}

model Space {
  id                       String         @id @default(cuid())
  appId                    String         @unique
  name                     String?
  icon                     String?
  owner                    User?          @relation(fields: [userId], references: [id])
  userId                   String?
  active                   Boolean        @default(false)
  admins                   Admin[]
  updates                  SpaceUpdate[]
  tables                   SpaceTable[]
  spaceUis                 SpaceUI[]
  apiKeys                  SpaceAPIKeys[]
  users                    SpaceUser[]
  configVars               ConfigVars[]
  secret                   String
  miniAppChannel           Boolean        @default(false)
  apiChannel               Boolean        @default(false)
  subdomainChannel         Boolean        @default(false)
  customDomainChannel      Boolean        @default(false)
  standaloneMobileChannel  Boolean        @default(false)
  standaloneDesktopChannel Boolean        @default(false)
  uploadProvider           String?        @default("cloudinary")
  template                 Boolean        @default(false)
  rules                    APIRule[]
  permissions              Permission[]
  defaultUIId              String?
  deactivated              Boolean?       @default(false)
  dashboards               Dashboard[]
  spaceSessions            SpaceSession[]
  superAdminSecret         String?
  logs                     Log[]
  uiVid                    String?
  feedbacks                MsgFeedback[]
}

model Example {
  id       String  @id @default(cuid())
  property String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  spaces         Space[]
  admins         Admin[]
  spaceUpdates   SpaceUpdate[]
  spaceUser      SpaceUser[]
  spaceAPIKeys   SpaceAPIKeys[]
  spaceTables    SpaceTable[]
  configVars     ConfigVars[]
  spaceUIVersion SpaceUIVersion[]
  spaceUI        SpaceUI[]
  BlogContent    BlogContent[]
  comments       Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
